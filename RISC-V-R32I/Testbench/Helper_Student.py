def value_to_string(value):
    try:
        return hex(value.integer)
    except ValueError:
        return 'x'

def Log_Datapath(dut, logger):
    # Log whatever signal you want from the datapath, called before positive clock edge
    logger.debug("************ DUT DATAPATH Signals ***************")
    dut._log.info("reset:%s", value_to_string(dut.Datapath.reset.value))
    dut._log.info("ALUSrc:%s", value_to_string(dut.Datapath.ALUSrc.value))
    dut._log.info("ALUSrc_A:%s", value_to_string(dut.Datapath.ALUSrc_A.value))
    dut._log.info("MemWrite:%s", value_to_string(dut.Datapath.MemWrite.value))
    dut._log.info("RegWrite:%s", value_to_string(dut.Datapath.RegWrite.value))
    dut._log.info("ResultSrc:%s", value_to_string(dut.Datapath.ResultSrc.value))
    dut._log.info("SrcB_0Select:%s", value_to_string(dut.Datapath.SrcB_0Select.value))
    dut._log.info("WD3Sel:%s", value_to_string(dut.Datapath.WD3Sel.value))
    dut._log.info("shamtMuxSelect:%s", value_to_string(dut.Datapath.shamtMuxSelect.value))
    dut._log.info("MemoryOutExtenderSelect:%s", value_to_string(dut.Datapath.MemoryOutExtenderSelect.value))
    dut._log.info("MemoryInExtenderSelect:%s", value_to_string(dut.Datapath.MemoryInExtenderSelect.value))
    dut._log.info("ImmSrc:%s", value_to_string(dut.Datapath.ImmSrc.value))
    dut._log.info("ShifterControl:%s", value_to_string(dut.Datapath.ShifterControl.value))
    dut._log.info("PCSrc:%s", value_to_string(dut.Datapath.PCSrc.value))
    dut._log.info("ALUControl:%s", value_to_string(dut.Datapath.ALUControl.value))
    dut._log.info("InstructionType:%s", value_to_string(dut.Datapath.InstructionType.value))
    dut._log.info("Debug_Source_select:%s", value_to_string(dut.Datapath.Debug_Source_select.value))
    dut._log.info("Debug_output:%s", value_to_string(dut.Datapath.Debug_output.value))
    dut._log.info("Zero:%s", value_to_string(dut.Datapath.Zero.value))
    dut._log.info("Negative:%s", value_to_string(dut.Datapath.Negative.value))
    dut._log.info("PC:%s", value_to_string(dut.Datapath.PC.value))
    dut._log.info("funct3:%s", value_to_string(dut.Datapath.funct3.value))
    dut._log.info("funct7:%s", value_to_string(dut.Datapath.funct7.value))
    dut._log.info("op:%s", value_to_string(dut.Datapath.op.value))
    dut._log.info("Instruction:%s", value_to_string(dut.Datapath.Instr.value))
    dut._log.info("Result:%s", value_to_string(dut.Datapath.Result.value))
    dut._log.info("WD3:%s", value_to_string(dut.Datapath.WD3.value))
    dut._log.info("PCNext:%s", value_to_string(dut.Datapath.PCNext.value))
    dut._log.info("PCTarget:%s", value_to_string(dut.Datapath.PCTarget.value))
    dut._log.info("ALUResult:%s", value_to_string(dut.Datapath.ALUResult.value))
    dut._log.info("SrcA:%s", value_to_string(dut.Datapath.SrcA.value))
    dut._log.info("SrcB:%s", value_to_string(dut.Datapath.SrcB.value))
    dut._log.info("RD1:%s", value_to_string(dut.Datapath.RD1.value))
    dut._log.info("RD2:%s", value_to_string(dut.Datapath.RD2.value))
    dut._log.info("ImmExt:%s", value_to_string(dut.Datapath.ImmExt.value))
    dut._log.info("ImmInter:%s", value_to_string(dut.Datapath.extender.IntermediateData.value))
    dut._log.info("ImmDATA:%s", value_to_string(dut.Datapath.extender.DATA.value))
    dut._log.info("ShifterShamt:%s", value_to_string(dut.Datapath.ShifterShamt.value))
    dut._log.info("ShifterOut:%s", value_to_string(dut.Datapath.ShifterOut.value))  
    dut._log.info("SrcB_0Out:%s", value_to_string(dut.Datapath.SrcB_0Out.value)) 
    dut._log.info("Zero:%s", value_to_string(dut.Datapath.Zero.value))   
    dut._log.info("Negative:%s", value_to_string(dut.Datapath.Negative.value)) 
    dut._log.info("WriteData:%s", value_to_string(dut.Datapath.WriteData.value))
    dut._log.info("ReadData:%s", value_to_string(dut.Datapath.ReadData.value))
    dut._log.info("MemoryReadOut:%s", value_to_string(dut.Datapath.MemoryReadOut.value))  
    dut._log.info("MemoryAddrIn:%s", value_to_string(dut.Datapath.MemoryAddrIn.value))
    
def Log_Controller(dut, logger):
    # Log whatever signal you want from the controller, called before positive clock edge
    logger.debug("************ DUT Controller Signals ***************")
    dut._log.info("op:%s", value_to_string(dut.Control_unit.op.value))
    dut._log.info("funct3:%s", value_to_string(dut.Control_unit.funct3.value))
    dut._log.info("funct7:%s", value_to_string(dut.Control_unit.funct7.value))
    dut._log.info("Zero:%s", value_to_string(dut.Control_unit.Zero.value))
    dut._log.info("Negative:%s", value_to_string(dut.Control_unit.Negative.value))
    dut._log.info("WD3Sel:%s", value_to_string(dut.Control_unit.WD3Sel.value))
    dut._log.info("PCSrc:%s", value_to_string(dut.Control_unit.PCSrc.value))
    dut._log.info("ResultSrc:%s", value_to_string(dut.Control_unit.ResultSrc.value))
    dut._log.info("RegWrite:%s", value_to_string(dut.Control_unit.RegWrite.value))
    dut._log.info("MemWrite:%s", value_to_string(dut.Control_unit.MemWrite.value))
    dut._log.info("ALUSrc:%s", value_to_string(dut.Control_unit.ALUSrc.value))
    dut._log.info("ALUSrc_A:%s", value_to_string(dut.Control_unit.ALUSrc_A.value))
    dut._log.info("SrcB_0Select:%s", value_to_string(dut.Control_unit.SrcB_0Select.value))
    dut._log.info("shamtMuxSelect:%s", value_to_string(dut.Control_unit.shamtMuxSelect.value))
    dut._log.info("ALUControl:%s", value_to_string(dut.Control_unit.ALUControl.value))
    dut._log.info("ShifterControl:%s", value_to_string(dut.Control_unit.ShifterControl.value))
    dut._log.info("ImmSrc:%s", value_to_string(dut.Control_unit.ImmSrc.value))
    dut._log.info("MemoryOutExtenderSelect:%s", value_to_string(dut.Control_unit.MemoryOutExtenderSelect.value))
    dut._log.info("MemoryInExtenderSelect:%s", value_to_string(dut.Control_unit.MemoryInExtenderSelect.value))
    dut._log.info("InstructionType:%s", value_to_string(dut.Control_unit.InstructionType.value))